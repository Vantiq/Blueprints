PROCEDURE startA_TechnicianCollaborationCollaborationType_NotifyAcceptReject(collaboration, users, payloadOverride) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianCollaborationCollaborationType"

var title = "Work Order"
var body = "Your attention is needed"
var payload = {}

log.debug("collaboration.TechnicianCollaborationCollaborationType.NotifyAcceptReject: Constructing notification with title: Work Order, body: Your attention is needed for collaboration id: {}", [collaboration.id])

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "NotifyAcceptReject"} TO TOPIC "/collaborationtypes/TechnicianCollaborationCollaborationType/debug"

// If a clientName was specified use that
if ("Accept-Reject-Assignment" != "") {
    payload = SELECT ONE FROM pagesets WHERE name == "Accept-Reject-Assignment"
    if (!payload) {
        exception("io.vantiq.collaboration.TechnicianCollaborationCollaborationType.NotifyAcceptReject.notification.pageSet.not.found",
                  "The notification {0} was configured to send the ArsPageSet {1}, but no ArsPageSet by that name was found.",
                  ["NotifyAcceptReject", "Accept-Reject-Assignment"])
    }
} else {
    // if no clientName was specified try old payload representation
    // This is just for backwards compatibility, as payload is no longer a configuration
    // parameter for the notification activity pattern
    payload = {}

    // Support payloadOverride as a runtime parameter so users can
    // construct dynamic payloads in execute activities and have those override the
    // payload in the configuration parameters
    if (payloadOverride != null) {
        payload = payloadOverride
    }
}

payload.responseTopic = "/notifications/TechnicianCollaborationCollaborationType/NotifyAcceptReject"
if (!payload.state) {
    payload.state = {}
}
payload.state.collaborationId = collaboration.id

SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["NotifyAcceptReject"]

var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)

// substitute any contextual references into the payload
payload = generateResource(payload, context, false)

body = generateResource(body, context, false)
title = generateResource(title, context, false)

// Make sure payload has a parameters field
if (!payload.containsKey("parameters")) {
    payload.parameters = {}
}

// add contextual info to payload
payload.parameters.context = context

log.debug("collaboration.TechnicianCollaborationCollaborationType.NotifyAcceptReject: preparing to send payload: {} to users: {} for collaboration id: {}", [payload, users, collaboration.id])

// Send the payload
var payloadResult = Notification.sendPayload("VantiqPushNotification", null, title, body, payload, users)

// save payloadResult._id to the results so it can be deleted by _id
var activityResults = collaboration.results["NotifyAcceptReject"]
if (!activityResults) {
    activityResults = {}
}
activityResults.payloadId = payloadResult._id
collaboration.results["NotifyAcceptReject"] = activityResults
// Save the results object and the changes to the collaborators map
ALTER collaboration ({results: collaboration.results, id: collaboration.id})

log.debug("collaboration.TechnicianCollaborationCollaborationType.NotifyAcceptReject: Successfully sent out notification for collaboration id: {}", [collaboration.id])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["NotifyAcceptReject"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianCollaborationCollaborationType_NoResponse(context.collaboration, null)

}

}
