PROCEDURE startA_TechnicianDispatch_ProcessAssignment(collaboration, target) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianDispatch"

log.debug("collaboration.TechnicianDispatch.ProcessAssignment: Getting recommendation using procedure: collab.weightedNearbyRecommendations for target: {} in collaboration id: {}", [target, collaboration.id])

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "ProcessAssignment"} TO TOPIC "/collaborationtypes/TechnicianDispatch/debug"

// Get the candidate type definition and verify that it's a real type
var candidateType = SELECT ONE FROM types WHERE name == "Technicians"
if (!candidateType) {
    exception("io.vantiq.collaboration.TechnicianDispatch.ProcessAssignment.recommendation.error",
        "The recommendation activity: {0} failed for collaboration: {1} because the candidate type: {2} could not be found.",
        ["ProcessAssignment", collaboration.id, "Technicians"])
}

// Get the match type definition and verify that it's a real type
var matchType = SELECT ONE FROM types WHERE name == "Technicians"
if (!matchType) {
    exception("io.vantiq.collaboration.TechnicianDispatch.ProcessAssignment.recommendation.error",
        "The recommendation activity: {0} failed for collaboration: {1} because the match type: {2} could not be found.",
        ["ProcessAssignment", collaboration.id, "Technicians"])
}

// Get the recommendations
var recommendations = collab.weightedNearbyRecommendations({"excludeProperties":["id"],"maxRecommendations":10}, target, "Technicians", "Technicians")

log.debug("collaboration.TechnicianDispatch.ProcessAssignment: Recommendation procedure: collab.weightedNearbyRecommendations returned results: {} for collaboration id: {}", [recommendations, collaboration.id])

// save recommendations to the results
var activityResults = collaboration.results["ProcessAssignment"]
if (!activityResults) {
    activityResults = {}
}
activityResults.recommendations = recommendations
collaboration.results["ProcessAssignment"] = activityResults
// Save the results object and the changes to the collaborators map
ALTER collaboration ({results: collaboration.results, id: collaboration.id})

log.debug("collaboration.TechnicianDispatch.ProcessAssignment: Successfully wrote results of recommendation for collaboration id: {}", [collaboration.id])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["ProcessAssignment"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_EscalationAssignmentTimer(context.collaboration, null)

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_AcceptRejectWorkorder(context.collaboration, context.collaboration.results.ProcessAssignment.recommendations)

}

}
