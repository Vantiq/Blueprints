PROCEDURE startA_TechnicianDispatch_UpdateWorkorderStatus(collaboration, instance) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianDispatch"

log.debug("collaboration.TechnicianDispatch.UpdateWorkorderStatus: Preparing to insert {} into type: Workorders for collaboration id: {}", [instance, collaboration.id])

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "UpdateWorkorderStatus"} TO TOPIC "/collaborationtypes/TechnicianDispatch/debug"

try {
     UPSERT Workorders(instance)
} catch (ex) {
    exception("io.vantiq.collaboration.TechnicianDispatch.UpdateWorkorderStatus.UPSERT.failed",
              "UPSERT failed in task {0} for collaboration {1} with the following exception: {2}",
              ["UpdateWorkorderStatus", collaboration.id, ex.message])
}

var newInstance = SELECT EXACTLY ONE FROM Workorders WHERE id == instance.id

var activityResults = collaboration.results["UpdateWorkorderStatus"]
if (!activityResults) {
    activityResults = {}
}
activityResults.result = newInstance
collaboration.results["UpdateWorkorderStatus"] = activityResults
// Save the change to results
ALTER collaboration ({results: collaboration.results, id: collaboration.id})
log.debug("collaboration.TechnicianDispatch.UpdateWorkorderStatus: Successfully finished UPSERT op into Workorders for collaboration id: {}", [collaboration.id])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["UpdateWorkorderStatus"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_CustomerNotifyTechArrival(context.collaboration, [context.workorder])

}

}
