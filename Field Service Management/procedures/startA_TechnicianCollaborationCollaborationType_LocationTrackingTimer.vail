PROCEDURE startA_TechnicianCollaborationCollaborationType_LocationTrackingTimer(collaboration, escalationTimeOverride) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianCollaborationCollaborationType"

log.debug("collaboration.TechnicianCollaborationCollaborationType.LocationTrackingTimer: Starting an escalation for collaboration id: {}", collaboration.id)

var escalationTime = 1000

if (escalationTimeOverride != null) {
    escalationTime = escalationTimeOverride
}

var escalation = {
    collaborationType    : "TechnicianCollaborationCollaborationType",
    activityType         : "LocationTrackingTimer",
    collaborationId      : collaboration.id,
    escalationDeadline   : now().plusMillis(escalationTime * 1000),
    state                : "waiting",
    ars_dependentResource: "/collaborations/" + collaboration.id
}

log.debug("collaboration.TechnicianCollaborationCollaborationType.LocationTrackingTimer: Creating escalation deadline {} for collaboration id: {}", [escalation, collaboration.id])

UPSERT ArsEscalationDeadline(escalation)

var activityResults = collaboration.results["LocationTrackingTimer"]
if (!activityResults) {
    activityResults = {}
}
activityResults.state = "waiting"
activityResults.updateTime = now()
collaboration.results["LocationTrackingTimer"] = activityResults
// Save the change to results
ALTER collaboration ({results: collaboration.results, id: collaboration.id})

// Schedule publication of this escalation for the escalation time
PUBLISH escalation TO TOPIC "/TechnicianCollaborationCollaborationType/LocationTrackingTimer/expiration" SCHEDULE {interval: escalationTime * 1000}

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "LocationTrackingTimer"} TO TOPIC "/collaborationtypes/TechnicianCollaborationCollaborationType/debug"

log.debug("collaboration.TechnicianCollaborationCollaborationType.LocationTrackingTimer: Successfully created escalation for collaboration id: {}", [collaboration.id])
