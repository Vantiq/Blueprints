PROCEDURE startA_TechnicianCollaborationCollaborationType_AssignTech(collaboration, value) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianCollaborationCollaborationType"

log.debug("collaboration.TechnicianCollaborationCollaborationType.AssignTech: Beginning assignment of value: {}", [value])

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "AssignTech"} TO TOPIC "/collaborationtypes/TechnicianCollaborationCollaborationType/debug"

// The collaboration id has to be part of the alter
var updateDoc = {id: collaboration.id}

if ("collaborator" == "collaborator") {
    collaboration.collaborators["tech"] = value
    updateDoc.collaborators = collaboration.collaborators
} else if ("collaborator" == "entity") {
    collaboration.entities["tech"] = Utils.buildResourceRef("", value)
    updateDoc.entities = collaboration.entities
}

var activityResults = collaboration.results["AssignTech"]
if (!activityResults) {
    activityResults = {}
}
activityResults.assignmentTime = now()
activityResults.assignedType = "collaborator"
activityResults.assignedRoleName = "tech"
activityResults.assignedValue = value
collaboration.results["AssignTech"] = activityResults

updateDoc.results = collaboration.results

log.debug("collaboration.TechnicianCollaborationCollaborationType.AssignTech: Assignment update doc: {}", [updateDoc])

// Save the results object and the changes to the collaborators map
ALTER collaboration (updateDoc)
log.debug("collaboration.TechnicianCollaborationCollaborationType.AssignTech: Successfully completed assignment operation for update doc: {}", [updateDoc])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["AssignTech"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
collab.sendEmailScheduledArrival(context.workorder.id)

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianCollaborationCollaborationType_LocationTrackingTimer(context.collaboration, collab.scheduleLocationTracking(context.collaboration.results.Initiate.event.id))

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianCollaborationCollaborationType_TechMissedArrival(context.collaboration, TechMissedArrival(context.workorder.scheduledArrivalDate))

}

}
