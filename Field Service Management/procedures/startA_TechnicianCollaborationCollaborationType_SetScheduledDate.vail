PROCEDURE startA_TechnicianCollaborationCollaborationType_SetScheduledDate(collaboration, parameters) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianCollaborationCollaborationType"

log.debug("collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate: Preparing to execute collab.setScheduledDate for collaboration id: {}", [collaboration.id])
var procDef = Utils.getProcedure("collab.setScheduledDate")
log.debug("collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate: Found procedure definition: {}", [procDef])

if (!procDef) {
    exception("io.vantiq.collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate.procedure.not.found",
              "The service: {0} specified in the configuration of {1} could not be found.", ["collab.setScheduledDate", "SetScheduledDate"])
}

var expectedParamCount = procDef.parameters.size()
var foundParamCount = parameters.size()

if (expectedParamCount < foundParamCount) {
    exception("io.vantiq.collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate.procedure.parameters.error",
              "The procedure: {0} requires {1}, but {2} were found in the configuration of {3}", ["collab.setScheduledDate", expectedParamCount, foundParamCount, "SetScheduledDate"])
} else if (expectedParamCount > foundParamCount) {
    // If fewer params were supplied than expected, push nulls onto the parameter list
    // to match the expected size of the parameters list
    for (i in range(0, expectedParamCount - foundParamCount)) {
        parameters.push(null)
    }
}

log.debug("collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate: Procedure collab.setScheduledDate will be executed with parameters: {} for collaboration id: {}", [parameters, collaboration.id])
// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "SetScheduledDate"} TO TOPIC "/collaborationtypes/TechnicianCollaborationCollaborationType/debug"

var procResults = null

procResults = collab.setScheduledDate(parameters[0], parameters[1], parameters[2])

log.debug("collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate: Finished executing collab.setScheduledDate, which returned results: {} for collaboration id: {}", [procResults, collaboration.id])
log.debug("Finished executing: {} which returned result {}", [procDef.name, procResults.toString()])

var activityResults = collaboration.results["SetScheduledDate"]
if (!activityResults) {
    activityResults = {}
}
activityResults.result = procResults
activityResults.resultTime = now()
collaboration.results["SetScheduledDate"] = activityResults
// Save the change to results
ALTER collaboration ({results: collaboration.results, id: collaboration.id})
log.debug("collaboration.TechnicianCollaborationCollaborationType.SetScheduledDate: Successfully wrote results from executing collab.setScheduledDate for collaboration id: {}", [collaboration.id])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["SetScheduledDate"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianCollaborationCollaborationType_WorkOrderDetail()

}

}
