RULE TechnicianDispatch_ScheduleArrivalDateTime_NotificationResponse HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianDispatch"
WHEN PUBLISH OCCURS ON "/notifications/TechnicianDispatch/ScheduleArrivalDateTime" as event

log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response: received notification response: {}", [event.toString()])

// Re-establish collaboration context by parsing the name of the chatroom in the event
// TODO: Rename field in ArsPayloadMessage to be collaborationId
var collaborationId = event.newValue.state.collaborationId
if (!collaborationId) {
    exception("io.vantiq.collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response.error",
    "Could not find an associated collaboration instance for response to notification activity: {0}", ["ScheduleArrivalDateTime"])
}

// Get this collaboration instance based on the id in the published payload
var collaboration = SELECT EXACTLY ONE FROM collaborations WHERE id == collaborationId

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "ScheduleArrivalDateTime", event: "response"} TO TOPIC "/collaborationtypes/TechnicianDispatch/debug"

// update the collaboration instance results to indicate a user has arrived
if (!collaboration.results.ScheduleArrivalDateTime) {
    collaboration.results.ScheduleArrivalDateTime = { "responses": []}
} else if (!collaboration.results.ScheduleArrivalDateTime.responses) {
    collaboration.results.ScheduleArrivalDateTime.responses = []
}

// construct an object with the arrived user's name and the time they arrived
var response = {
    "username": event.newValue.username,
    "responseTime": now(),
    "response": event.newValue.values,
    "submitValue": event.newValue.submitValue,
    "state": event.newValue.state,
    "arsInfo": event.newValue.arsInfo // deviceName, deviceId, and more are in arsInfo
}

collaboration.results.ScheduleArrivalDateTime.responses.push(response)

log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response: Saving response: {} for collaboration id: {}", [response, collaboration.id])

// Save the change to results
ALTER collaboration ({results: collaboration.results, id: collaboration.id})

// do prep work for executing any [first]ResponseBehaviors
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["ScheduleArrivalDateTime"]

var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
context.event = event.newValue
context.response = response

if (true) {
    // execute firstResponseBehaviors only if this was the first response we saved to results
    if (collaboration.results.ScheduleArrivalDateTime.responses.size() == 1) {
        // Publish extra first response event to update badging in UI
        PUBLISH {collaboration: collaboration.id, task: "ScheduleArrivalDateTime", event: "firstResponse"} TO TOPIC "/collaborationtypes/TechnicianDispatch/debug"
        log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.firstResponse: Preparing to execute first response behaviors for response: {} in collaboration id: {}", [response, collaboration.id])
        IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_SetTrackingTimer(context.collaboration, collab.scheduleLocationTracking( context.workorder, "1 hours"))

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_CustomerSchedulingAlert(context.collaboration, [context.workorder])

}

        log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.firstResponse: Successfully executed first response behaviors for collaboration id: {}", [collaboration.id])
    }
}

if (false) {
    log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response: Preparing to execute response behaviors for response: {} in collaboration id: {}", [response, collaboration.id])
    
    log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response: Successfully executed response behaviors for collaboration id: {}", [collaboration.id])
}

log.debug("collaboration.TechnicianDispatch.ScheduleArrivalDateTime.response: Successfully processed response: {} to notification for collaboration id: {}", [response, collaboration.id])