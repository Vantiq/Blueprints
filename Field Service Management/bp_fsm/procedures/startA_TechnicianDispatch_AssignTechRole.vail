PROCEDURE startA_TechnicianDispatch_AssignTechRole(collaboration, value) HIDDEN WITH ars_dependentResource="/collaborationtypes/TechnicianDispatch"

log.debug("collaboration.TechnicianDispatch.AssignTechRole: Beginning assignment of value: {}", [value])

// Publish events to update badging in UI
PUBLISH {collaboration: collaboration.id, task: "AssignTechRole"} TO TOPIC "/collaborationtypes/TechnicianDispatch/debug"

// The collaboration id has to be part of the alter
var updateDoc = {id: collaboration.id}

if ("collaborator" == "collaborator") {
    collaboration.collaborators["technician"] = value
    updateDoc.collaborators = collaboration.collaborators
} else if ("collaborator" == "entity") {
    collaboration.entities["technician"] = Utils.buildResourceRef("", value)
    updateDoc.entities = collaboration.entities
}

var activityResults = collaboration.results["AssignTechRole"]
if (!activityResults) {
    activityResults = {}
}
activityResults.assignmentTime = now()
activityResults.assignedType = "collaborator"
activityResults.assignedRoleName = "technician"
activityResults.assignedValue = value
collaboration.results["AssignTechRole"] = activityResults

updateDoc.results = collaboration.results

log.debug("collaboration.TechnicianDispatch.AssignTechRole: Assignment update doc: {}", [updateDoc])

// Save the results object and the changes to the collaborators map
ALTER collaboration (updateDoc)
log.debug("collaboration.TechnicianDispatch.AssignTechRole: Successfully completed assignment operation for update doc: {}", [updateDoc])
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["AssignTechRole"]

if (activityType != null AND activityType.additionalBehaviors != null) {
    var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
    IF (true
        ) {

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_ScheduleArrivalDateTime(context.collaboration, context.technician)

context = CollaborationGeneration.reEstablishCollaborationContext(context)
startA_TechnicianDispatch_UpdateWorkorderAssignment(context.collaboration, [context.collaboration, "Assigned"])

context = CollaborationGeneration.reEstablishCollaborationContext(context)
CollaborationUtils.cancelEscalation(context.collaboration.id, "EscalationAssignmentTimer")

}

}
